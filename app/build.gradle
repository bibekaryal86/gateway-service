/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

buildscript {
    dependencies {
        classpath 'org.yaml:snakeyaml:2.3'
    }
}

plugins {
    id 'application'
    id 'java'
    id 'com.diffplug.spotless' version '7.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'io.netty:netty-all:4.1.116.Final'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.4'
    testImplementation 'org.mockito:mockito-core:5.15.2'
}

application {
    mainClass = 'gateway.service.App'
}

test {
    useJUnitPlatform()
}

jar {
    archiveFileName = 'gateway-service.jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes "Main-Class": "gateway.service.App"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

spotless {
    java {
        removeUnusedImports()
        googleJavaFormat()
    }
}

// everything below is for local development only
import org.yaml.snakeyaml.Yaml

def loadAppCredentialsEnvVariables() {
    def file = file('../gcp/app-credentials.yaml')
    if (file.exists()) {
        def data = new Yaml().load(file.text)
        def properties = new Properties()

        if (data?.env_variables) {
            data.env_variables.each { key, value ->
                properties.setProperty(key, value)
            }
        }
        return properties
    } else {
        println "Warning: app-credentials.yaml file not found!"
        return new Properties()
    }
}

def yamlProperties = loadAppCredentialsEnvVariables()

run {
    doFirst {
        yamlProperties.each { key, value ->
            environment key, value
        }
    }
}
